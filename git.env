JUST_PROJECT_PREFIX=GIT
JUST_VERSION="0.2.1+1dev"
if [ -z "${GIT_CWD+set}" ]; then
  GIT_CWD="$(\cd "$(\dirname "${BASH_SOURCE[0]}")"; \pwd)"
fi

: ${GIT_AUTO_ESCAPE=GIT_.*_DIR_DOCKER}

: ${GIT_DOCKER_REPO=docker_stage}

: ${GIT_HOME=/home/user}
: ${GIT_USERNAME=$(id -u -n)}
: ${GIT_UID=$(id -u)}
: ${GIT_GIDS=$(id -G)}
: ${GIT_GID=${GIT_GIDS%% *}}
: ${GIT_GROUP_NAMES=$(group_names)}

# This directory is added to the container using the docker-compose file. This mechanism
# should only be used when the directory is guaranteed to exist
: ${GIT_REPO_DIR=${PWD}}
# Must be a directory, or else I need the super project or I'm in a subfolder
if [ ! -d "${GIT_REPO_DIR}/.git" ]; then
  function find_git_dir()
  {
    local previous_pwd
    local remainder=''

    # Speed improvement: if it's right there, echo it out right away
    if [ -d ".git" ]; then
      export "${1}=${PWD}"
      export "${2}=${remainder}"
      return
    fi

    pushd . > /dev/null
      # Search for the file until some match is found
      while [ "${PWD}" != "${previous_pwd-}" ]; do
        if [ -d ".git" ]; then
          export "${1}=${PWD}"
          export "${2}=${remainder}"
          popd > /dev/null
          return
        fi
        previous_pwd="${PWD}"
        remainder="$(basename "${PWD}")${remainder:+/}${remainder}"
        cd ..
      done
    popd > /dev/null
  }
  find_git_dir GIT_REPO_DIR git_cwd_dir_docker
fi
: ${GIT_REPO_DIR_DOCKER=${GIT_REPO_DIR}}
: ${GIT_REPO_DIR_TYPE=bind}

if [ "${git_cwd_dir_docker-}" != "" ]; then
  git_cwd_dir_docker="${GIT_REPO_DIR_DOCKER}/${git_cwd_dir_docker}"
fi
: ${GIT_CWD_DIR_DOCKER=${git_cwd_dir_docker:-${GIT_REPO_DIR_DOCKER}}}
unset git_cwd_dir_docker

: ${GIT_SSH_AGENT_DIR=~/.ssh/agent}
: ${GIT_SSH_AGENT_DIR_DOCKER=${GIT_SSH_AGENT_DIR}}
: ${GIT_SSH_AGENT_DIR_TYPE=bind}
mkdir -p "${GIT_SSH_AGENT_DIR}"

: ${GIT_SSH_AGENT_ADDRESS=${GIT_SSH_AGENT_DIR}/ssh_agent_$(id -u).sock}
: ${GIT_SSH_AGENT_ADDRESS_DOCKER=${GIT_SSH_AGENT_DIR_DOCKER}/ssh_agent_$(id -u).sock}
: ${GIT_SSH_AGENT_INSTANCE=ssh_agent_${GIT_UID}}

: ${GIT_SSH_SOCK=${SSH_AUTH_SOCK-${GIT_SSH_AGENT_ADDRESS}}}
: ${GIT_SSH_SOCK_DOCKER=${SSH_AUTH_SOCK-${GIT_SSH_AGENT_ADDRESS_DOCKER}}}

# Example of a Dynamic Volume, that is created programatically instead
# always there. This directory is added to the container using GIT_GIT_VOLUMES.
# This mechanism is better when the directory doesn't exist, as the directory
# will be created and owned properly, unlike docker's default behavior
# : ${GIT_DATA_DIR=${GIT_SOURCE_DIR}/new-data}
# : ${GIT_DATA_DIR_DOCKER=/data}
# GIT_GIT_VOLUMES=(
#     "${GIT_DATA_DIR}:${GIT_DATA_DIR_DOCKER}"
#     ${GIT_GIT_VOLUMES+"${GIT_GIT_VOLUMES[@]}"})

###############################################################################
# Non-GIT Settings
###############################################################################

# Put variables that do not begin with GIT here.

: ${TZ=/usr/share/zoneinfo/UTC}

# Use this to add the user name to the docker-compose project name. This is
# important when multiple users are using this docker-compose project on a
# single host. This way all of the docker resources are prefixed with a unique
# name and do not collide
source "${VSI_COMMON_DIR}/linux/docker_functions.bsh" # define docker_compose_sanitize_project_name
: ${COMPOSE_PROJECT_NAME=$(docker_compose_sanitize_project_name "${GIT_CWD}" "${GIT_USERNAME}")}

